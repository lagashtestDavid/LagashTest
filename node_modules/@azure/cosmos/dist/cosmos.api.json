{
  "kind": "package",
  "name": "@azure/cosmos",
  "summary": [],
  "remarks": [],
  "exports": {
    "ClientSideMetrics": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(requestCharge: number);",
          "parameters": {
            "requestCharge": {
              "name": "requestCharge",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ClientSideMetrics"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ClientSideMetrics",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ClientSideMetrics",
            "description": []
          },
          "parameters": {
            "clientSideMetricsArray": {
              "name": "clientSideMetricsArray",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "ClientSideMetrics[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds one or more ClientSideMetrics to a copy of this instance and returns the result."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromArray": {
          "kind": "method",
          "signature": "static createFromArray(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "ClientSideMetrics",
            "description": []
          },
          "parameters": {
            "clientSideMetricsArray": {
              "name": "clientSideMetricsArray",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "ClientSideMetrics[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "requestCharge": {
          "kind": "property",
          "signature": "readonly requestCharge: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "zero": {
          "kind": "property",
          "signature": "static readonly zero: ClientSideMetrics;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "ClientSideMetrics",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Conflict": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to read or delete a given "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Conflict"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Conflict",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Conflicts"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Conflicts",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to query or read all conflicts."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, id: string, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Conflict"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Conflict",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<ConflictResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ConflictResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<ConflictResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ConflictResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Conflict"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Conflict",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ConflictDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "content": {
          "kind": "property",
          "signature": "content?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the conflict"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "operationType": {
          "kind": "property",
          "signature": "operationType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resourceId": {
          "kind": "property",
          "signature": "resourceId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Source resource id"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resourceType": {
          "kind": "property",
          "signature": "resourceType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ConflictResolutionMode": {
      "kind": "enum",
      "values": {
        "Custom": {
          "kind": "enum value",
          "value": "\"Custom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LastWriterWins": {
          "kind": "enum value",
          "value": "\"LastWriterWins\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ConflictResolutionPolicy": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on documents in the collection in the Azure Cosmos DB service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "conflictResolutionPath": {
          "kind": "property",
          "signature": "conflictResolutionPath?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets or sets the path which is present in each document in the Azure Cosmos DB service for last writer wins conflict-resolution. This path must be present in each document and must be an integer value. In case of a conflict occuring on a document, the document with the higher integer value in the specified path will be picked. If the path is unspecified, by default the timestamp path will be used."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This value should only be set when using "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictResolutionMode.LastWriterWins"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictResolutionMode",
                "memberName": "LastWriterWins"
              }
            },
            {
              "kind": "text",
              "text": "."
            },
            {
              "kind": "paragraph"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "conflictResolutionProcedure": {
          "kind": "property",
          "signature": "conflictResolutionProcedure?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets or sets the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " which is used for conflict resolution in the Azure Cosmos DB service. This stored procedure may be created after the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Container"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Container",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " is created and can be changed as required."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "1. This value should only be set when using "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictResolutionMode.Custom"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictResolutionMode",
                "memberName": "Custom"
              }
            },
            {
              "kind": "text",
              "text": ". 2. In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mode": {
          "kind": "property",
          "signature": "mode?: keyof typeof ConflictResolutionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof ConflictResolutionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets or sets the "
            },
            {
              "kind": "html-tag",
              "token": "<see cref=\"ConflictResolutionMode\"/>"
            },
            {
              "kind": "text",
              "text": " in the Azure Cosmos DB service. By default it is "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictResolutionMode.LastWriterWins"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictResolutionMode",
                "memberName": "LastWriterWins"
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ConflictResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "conflict": {
          "kind": "property",
          "signature": "conflict: Conflict;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Conflict",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Conflict"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Conflict",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConflictDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConflictDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Conflicts": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to query or read all conflicts."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Conflict"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Conflict",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to read or delete a given "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Conflict"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Conflict",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " by id."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Conflicts"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Conflicts",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": [
              {
                "kind": "api-link",
                "elements": [
                  {
                    "kind": "text",
                    "text": "QueryIterator"
                  }
                ],
                "target": {
                  "scopeName": "@azure",
                  "packageName": "cosmos",
                  "exportName": "QueryIterator",
                  "memberName": ""
                }
              },
              {
                "kind": "text",
                "text": " Allows you to return results in an array or iterate over them one at a time."
              }
            ]
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Queries all conflicts."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<ConflictDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<ConflictDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Reads all conflicts"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ConnectionMode": {
      "kind": "enum",
      "values": {
        "Gateway": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gateway mode talks to a intermediate gateway which handles the direct communicationi with your individual partitions."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines the connection behavior of the CosmosClient. Note, we currently only support Gateway Mode."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ConnectionPolicy": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ConnectionMode": {
          "kind": "property",
          "signature": "ConnectionMode: ConnectionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ConnectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines which mode to connect to Cosmos with. (Currently only supports Gateway option)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "DisableSSLVerification": {
          "kind": "property",
          "signature": "DisableSSLVerification: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag to disable SSL verification for the requests. SSL verification is enabled by default. Don't set this when targeting production endpoints. This is intended to be used only when targeting emulator endpoint to avoid failing your requests with SSL related error."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "EnableEndpointDiscovery": {
          "kind": "property",
          "signature": "EnableEndpointDiscovery: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag to enable/disable automatic redirecting of requests based on read/write operations."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MediaReadMode": {
          "kind": "property",
          "signature": "MediaReadMode: keyof typeof MediaReadMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof MediaReadMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Attachment content (aka media) download mode. Should be one of the values of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "MediaReadMode"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "MediaReadMode",
                "memberName": ""
              }
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MediaRequestTimeout": {
          "kind": "property",
          "signature": "MediaRequestTimeout: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Time to wait for response from network peer for attachment content (aka media) operations. Represented in milliseconds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "PreferredLocations": {
          "kind": "property",
          "signature": "PreferredLocations: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of azure regions to be used as preferred locations for read requests."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ProxyUrl": {
          "kind": "property",
          "signature": "ProxyUrl: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Http/Https proxy url"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "RequestTimeout": {
          "kind": "property",
          "signature": "RequestTimeout: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Request timeout (time to wait for response from network peer). Represented in milliseconds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "RetryOptions": {
          "kind": "property",
          "signature": "RetryOptions: RetryOptions;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "RetryOptions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "RetryOptions instance which defines several configurable properties used during retry."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "UseMultipleWriteLocations": {
          "kind": "property",
          "signature": "UseMultipleWriteLocations: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service. Default is "
            },
            {
              "kind": "code",
              "text": "false",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ConsistencyLevel": {
      "kind": "enum",
      "values": {
        "BoundedStaleness": {
          "kind": "enum value",
          "value": "\"BoundedStaleness\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Bounded Staleness guarantees that reads are not too out-of-date. This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds)."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "ConsistentPrefix": {
          "kind": "enum value",
          "value": "\"ConsistentPrefix\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps. All writes will be eventually be available for reads.`"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Eventual": {
          "kind": "enum value",
          "value": "\"Eventual\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Eventual Consistency guarantees that reads will return a subset of writes. All writes will be eventually be available for reads."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Session": {
          "kind": "enum value",
          "value": "\"Session\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Session Consistency guarantees monotonic reads (you never read old data, then new, then old again), monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads) within any single session."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Strong": {
          "kind": "enum value",
          "value": "\"Strong\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Strong Consistency guarantees that read operations always return the value that was last written."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the consistency levels supported for Azure Cosmos DB client operations."
        },
        {
          "kind": "html-tag",
          "token": "<br>"
        },
        {
          "kind": "text",
          "text": " The requested ConsistencyLevel must match or be weaker than that provisioned for the database account. Consistency levels."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Container": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for reading, replacing, or deleting a specific, existing container by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Containers"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Containers",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for creating new containers, and reading/querying all containers; use "
        },
        {
          "kind": "code",
          "text": ".containers",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Note: all these operations make calls against a fixed budget. You should design your system such that these calls scale sublinearly with your application. For instance, do not call "
        },
        {
          "kind": "code",
          "text": "container(id).read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " before every single "
        },
        {
          "kind": "code",
          "text": "item.read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " call, to ensure the container exists; do this once on application start up."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(database: Database, id: string, clientContext: ClientContext);",
          "parameters": {
            "database": {
              "name": "database",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Database"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a container instance. Note: You should get this from "
            },
            {
              "kind": "code",
              "text": "database.container(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": ", rather than creating your own object."
            }
          ],
          "remarks": []
        },
        "conflict": {
          "kind": "method",
          "signature": "conflict(id: string): Conflict;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Conflict",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Conflict"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Conflict",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".conflicts",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new conflicts, or querying/reading all conflicts."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "conflicts": {
          "kind": "property",
          "signature": "readonly conflicts: Conflicts;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Conflicts",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "database": {
          "kind": "property",
          "signature": "readonly database: Database;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Database",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<ContainerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ContainerResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the container"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "extractPartitionKey": {
          "kind": "method",
          "signature": "extractPartitionKey(document: any, partitionKeyDefinition: PartitionKeyDefinition): PartitionKey[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "PartitionKey[]",
            "description": []
          },
          "parameters": {
            "document": {
              "name": "document",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "partitionKeyDefinition": {
              "name": "partitionKeyDefinition",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "PartitionKeyDefinition"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getPartitionKeyDefinition": {
          "kind": "method",
          "signature": "getPartitionKeyDefinition(): Promise<CosmosResponse<PartitionKeyDefinition, Container>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<CosmosResponse<PartitionKeyDefinition, Container>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the partition key definition first by looking into the cache otherwise by reading the collection. "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "method",
          "signature": "item(id: string, partitionKey?: string): Item;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Item",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "partitionKey": {
              "name": "partitionKey",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Item"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Item",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".items",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new items, or querying/reading all items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "items": {
          "kind": "property",
          "signature": "readonly items: Items;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Items",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations for creating new items, and reading/querying all items"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For reading, replacing, or deleting an existing item, use "
            },
            {
              "kind": "code",
              "text": ".item(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<ContainerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ContainerResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the container's definition"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: ContainerDefinition, options?: RequestOptions): Promise<ContainerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ContainerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ContainerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the container's definition"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "storedProcedure": {
          "kind": "method",
          "signature": "storedProcedure(id: string): StoredProcedure;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "StoredProcedure",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".storedProcedures",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new stored procedures, or querying/reading all stored procedures."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "storedProcedures": {
          "kind": "property",
          "signature": "readonly storedProcedures: StoredProcedures;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "StoredProcedures",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations for creating new stored procedures, and reading/querying all stored procedures."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For reading, replacing, or deleting an existing stored procedure, use "
            },
            {
              "kind": "code",
              "text": ".storedProcedure(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "trigger": {
          "kind": "method",
          "signature": "trigger(id: string): Trigger;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Trigger",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".triggers",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new triggers, or querying/reading all triggers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "triggers": {
          "kind": "property",
          "signature": "readonly triggers: Triggers;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Triggers",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations for creating new triggers, and reading/querying all triggers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For reading, replacing, or deleting an existing trigger, use "
            },
            {
              "kind": "code",
              "text": ".trigger(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "userDefinedFunction": {
          "kind": "method",
          "signature": "userDefinedFunction(id: string): UserDefinedFunction;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "UserDefinedFunction",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".userDefinedFunctions",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new user defined functions, or querying/reading all user defined functions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "userDefinedFunctions": {
          "kind": "property",
          "signature": "readonly userDefinedFunctions: UserDefinedFunctions;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "UserDefinedFunctions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations for creating new user defined functions, and reading/querying all user defined functions."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For reading, replacing, or deleting an existing user defined function, use "
            },
            {
              "kind": "code",
              "text": ".userDefinedFunction(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ContainerDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "conflictResolutionPolicy": {
          "kind": "property",
          "signature": "conflictResolutionPolicy?: ConflictResolutionPolicy;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ConflictResolutionPolicy",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The conflict resolution policy used to resolve conflicts in a container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultTtl": {
          "kind": "property",
          "signature": "defaultTtl?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default time to live in seconds for items in a container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexingPolicy": {
          "kind": "property",
          "signature": "indexingPolicy?: IndexingPolicy;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IndexingPolicy",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The indexing policy associated with the container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "partitionKey": {
          "kind": "property",
          "signature": "partitionKey?: PartitionKeyDefinition;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PartitionKeyDefinition",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "TODO"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ContainerResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Response object for Container operations"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "container": {
          "kind": "property",
          "signature": "container: Container;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Container"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Container",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " that the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ContainerDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ContainerDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponds to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Containers": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for creating new containers, and reading/querying all containers"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Container"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Container",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for reading, replacing, or deleting an existing container; use "
        },
        {
          "kind": "code",
          "text": ".container(id)",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Note: all these operations make calls against a fixed budget. You should design your system such that these calls scale sublinearly with your application. For instance, do not call "
        },
        {
          "kind": "code",
          "text": "containers.readAll()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " before every single "
        },
        {
          "kind": "code",
          "text": "item.read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " call, to ensure the container exists; do this once on application start up."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(database: Database, clientContext: ClientContext);",
          "parameters": {
            "database": {
              "name": "database",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Database"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Containers"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Containers",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "create": {
          "kind": "method",
          "signature": "create(body: ContainerDefinition, options?: RequestOptions): Promise<ContainerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ContainerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ContainerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a container."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A container is a named logical container for items."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A database may contain zero or more named containers and each container consists of zero or more JSON items."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Being schema-free, the items in a container do not need to share the same structure or fields."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Since containers are application resources, they can be authorized using either the master key or resource keys."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createIfNotExists": {
          "kind": "method",
          "signature": "createIfNotExists(body: ContainerDefinition, options?: RequestOptions): Promise<ContainerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ContainerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ContainerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checks if a Container exists, and, if it doesn't, creates it. This will make a read operation based on the id in the "
            },
            {
              "kind": "code",
              "text": "body",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": ", then if it is not found, a create operation. You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.)"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A container is a named logical container for items."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A database may contain zero or more named containers and each container consists of zero or more JSON items."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Being schema-free, the items in a container do not need to share the same structure or fields."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Since containers are application resources, they can be authorized using either the master key or resource keys."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "database": {
          "kind": "property",
          "signature": "readonly database: Database;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Database",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": [
              {
                "kind": "api-link",
                "elements": [
                  {
                    "kind": "text",
                    "text": "QueryIterator"
                  }
                ],
                "target": {
                  "scopeName": "@azure",
                  "packageName": "cosmos",
                  "exportName": "QueryIterator",
                  "memberName": ""
                }
              },
              {
                "kind": "text",
                "text": " Allows you to return specific contaienrs in an array or iterate over them one at a time."
              }
            ]
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Queries all containers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<ContainerDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<ContainerDefinition & Resource>",
            "description": [
              {
                "kind": "api-link",
                "elements": [
                  {
                    "kind": "text",
                    "text": "QueryIterator"
                  }
                ],
                "target": {
                  "scopeName": "@azure",
                  "packageName": "cosmos",
                  "exportName": "QueryIterator",
                  "memberName": ""
                }
              },
              {
                "kind": "text",
                "text": " Allows you to return all containers in an array or iterate over them one at a time."
              }
            ]
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all containers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CosmosClient": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Provides a client-side logical representation of the Azure Cosmos DB database account. This client is used to configure and execute requests in the Azure Cosmos DB database service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(options: CosmosClientOptions);",
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "CosmosClientOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "CosmosClient"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "CosmosClient",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "database": {
          "kind": "method",
          "signature": "database(id: string): Database;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Database",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This does not make a network call. Use "
            },
            {
              "kind": "code",
              "text": ".read",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to get info about the database after getting the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Database"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Database",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " object."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "databases": {
          "kind": "property",
          "signature": "readonly databases: Databases;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Databases",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for creating new databases, or querying/reading all databases."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".database(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to read, replace, or delete a specific, existing database by id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getDatabaseAccount": {
          "kind": "method",
          "signature": "getDatabaseAccount(options?: RequestOptions): Promise<CosmosResponse<DatabaseAccount, CosmosClient>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<CosmosResponse<DatabaseAccount, CosmosClient>>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get information about the current "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DatabaseAccount"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "DatabaseAccount",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " (including which regions are supported, etc.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getReadEndpoitn": {
          "kind": "method",
          "signature": "getReadEndpoitn(): Promise<string>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<string>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the currently used read endpoint. Useful for troubleshooting purposes."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getWriteEndpoint": {
          "kind": "method",
          "signature": "getWriteEndpoint(): Promise<string>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<string>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the currently used write endpoint url. Useful for troubleshooting purposes."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "offer": {
          "kind": "method",
          "signature": "offer(id: string): Offer;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Offer",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for reading, or updating a existing offer by id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "offers": {
          "kind": "property",
          "signature": "readonly offers: Offers;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Offers",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for querying & reading all offers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".offer(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to read, or replace existing offers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "CosmosClientOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "agent": {
          "kind": "property",
          "signature": "agent?: Agent;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Agent",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "auth": {
          "kind": "property",
          "signature": "auth: AuthOptions;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "AuthOptions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An object that is used for authenticating requests and must contains one of the options"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "connectionPolicy": {
          "kind": "property",
          "signature": "connectionPolicy?: ConnectionPolicy | {\n        [P in keyof ConnectionPolicy]?: ConnectionPolicy[P];\n    };",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ConnectionPolicy | {\n        [P in keyof ConnectionPolicy]?: ConnectionPolicy[P];\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An instance of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConnectionPolicy"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConnectionPolicy",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class. This parameter is optional and the default connectionPolicy will be used if omitted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "consistencyLevel": {
          "kind": "property",
          "signature": "consistencyLevel?: keyof typeof ConsistencyLevel;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof ConsistencyLevel",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional parameter that represents the consistency level. It can take any value from "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ConsistencyLevel"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "ConsistencyLevel",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultHeaders": {
          "kind": "property",
          "signature": "defaultHeaders?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "endpoint": {
          "kind": "property",
          "signature": "endpoint: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The service endpoint to use to create the client."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "queryCompatibilityMode": {
          "kind": "property",
          "signature": "queryCompatibilityMode?: QueryCompatibilityMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "QueryCompatibilityMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Database": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for reading or deleting an existing database."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Databases"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Databases",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for creating new databases, and reading/querying all databases; use "
        },
        {
          "kind": "code",
          "text": "client.databases",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Note: all these operations make calls against a fixed budget. You should design your system such that these calls scale sublinearly with your application. For instance, do not call "
        },
        {
          "kind": "code",
          "text": "database.read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " before every single "
        },
        {
          "kind": "code",
          "text": "item.read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " call, to ensure the database exists; do this once on application start up."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(client: CosmosClient, id: string, clientContext: ClientContext);",
          "parameters": {
            "client": {
              "name": "client",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "CosmosClient"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Database"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Database",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " instance."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: the intention is to get this object from "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "CosmosClient"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "CosmosClient",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " via "
            },
            {
              "kind": "code",
              "text": "client.databsae(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": ", not to instaniate it yourself."
            }
          ],
          "remarks": []
        },
        "client": {
          "kind": "property",
          "signature": "readonly client: CosmosClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "CosmosClient",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "container": {
          "kind": "method",
          "signature": "container(id: string): Container;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Container",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Database"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Database",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".containers",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " creating new containers, or querying/reading all containers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "containers": {
          "kind": "property",
          "signature": "readonly containers: Containers;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Containers",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for creating new containers, or querying/reading all containers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".container(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Database"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Database",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<DatabaseResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<DatabaseResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given Database."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<DatabaseResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<DatabaseResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the definition of the given Database."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "user": {
          "kind": "method",
          "signature": "user(id: string): User;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "User",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".users",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating new users, or querying/reading all users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "users": {
          "kind": "property",
          "signature": "readonly users: Users;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Users",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used for creating new users, or querying/reading all users."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": ".user(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to read, replace, or delete a specific, existing "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " by id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DatabaseAccount": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a DatabaseAccount in the Azure Cosmos DB database service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(body: {\n        [key: string]: any;\n    }, headers: IHeaders);",
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "{\n        [key: string]: any;\n    }"
            },
            "headers": {
              "name": "headers",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IHeaders"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DatabaseAccount"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "DatabaseAccount",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "ConsistencyPolicy": {
          "kind": "property",
          "signature": "readonly ConsistencyPolicy: ConsistencyLevel;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ConsistencyLevel",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the UserConsistencyPolicy settings."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "CurrentMediaStorageUsageInMB": {
          "kind": "property",
          "signature": "readonly CurrentMediaStorageUsageInMB: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Current attachment content (media) usage in MBs (Retrieved from gateway )"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Value is returned from cached information updated periodically and is not guaranteed to be real time."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "DatabasesLink": {
          "kind": "property",
          "signature": "readonly DatabasesLink: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The self-link for Databases in the databaseAccount."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableMultipleWritableLocations": {
          "kind": "property",
          "signature": "readonly enableMultipleWritableLocations: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MaxMediaStorageUsageInMB": {
          "kind": "property",
          "signature": "readonly MaxMediaStorageUsageInMB: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Attachment content (media) storage quota in MBs ( Retrieved from gateway )."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MediaLink": {
          "kind": "property",
          "signature": "readonly MediaLink: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The self-link for Media in the databaseAccount."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "readableLocations": {
          "kind": "property",
          "signature": "readonly readableLocations: Location[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Location[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The list of readable locations for a geo-replicated database account."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "writableLocations": {
          "kind": "property",
          "signature": "readonly writableLocations: Location[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Location[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The list of writable locations for a geo-replicated database account."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DatabaseDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the database."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DatabaseResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Response object for Database operations"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "database": {
          "kind": "property",
          "signature": "database: Database;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Database",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Database"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Database",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " that the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DatabaseDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "DatabaseDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponds to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Databases": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for creating new databases, and reading/querying all databases"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Database"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Database",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for reading or deleting an existing database; use "
        },
        {
          "kind": "code",
          "text": "client.database(id)",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Note: all these operations make calls against a fixed budget. You should design your system such that these calls scale sublinearly with your application. For instance, do not call "
        },
        {
          "kind": "code",
          "text": "databases.readAll()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " before every single "
        },
        {
          "kind": "code",
          "text": "item.read()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " call, to ensure the database exists; do this once on application start up."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(client: CosmosClient, clientContext: ClientContext);",
          "parameters": {
            "client": {
              "name": "client",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "CosmosClient"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Databases"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Databases",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "client": {
          "kind": "property",
          "signature": "readonly client: CosmosClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "CosmosClient",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "create": {
          "kind": "method",
          "signature": "create(body: DatabaseDefinition, options?: RequestOptions): Promise<DatabaseResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<DatabaseResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DatabaseDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Send a request for creating a database."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A database manages users, permissions and a set of containers. Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Each Database consists of one or more containers, each of which in turn contain one or more documents. Since databases are an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createIfNotExists": {
          "kind": "method",
          "signature": "createIfNotExists(body: DatabaseDefinition, options?: RequestOptions): Promise<DatabaseResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<DatabaseResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "DatabaseDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check if a database exists, and if it doesn't, create it. This will make a read operation based on the id in the "
            },
            {
              "kind": "code",
              "text": "body",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": ", then if it is not found, a create operation."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A database manages users, permissions and a set of containers. Each Azure Cosmos DB Database Account is able to support multiple independent named databases, with the database being the logical container for data."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Each Database consists of one or more containers, each of which in turn contain one or more documents. Since databases are an an administrative resource, the Service Master Key will be required in order to access and successfully complete any action using the User APIs."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": [
              {
                "kind": "api-link",
                "elements": [
                  {
                    "kind": "text",
                    "text": "QueryIterator"
                  }
                ],
                "target": {
                  "scopeName": "@azure",
                  "packageName": "cosmos",
                  "exportName": "QueryIterator",
                  "memberName": ""
                }
              },
              {
                "kind": "text",
                "text": " Allows you to return all databases in an array or iterate over them one at a time."
              }
            ]
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string | SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Queries all databases."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<DatabaseDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<DatabaseDefinition & Resource>",
            "description": [
              {
                "kind": "api-link",
                "elements": [
                  {
                    "kind": "text",
                    "text": "QueryIterator"
                  }
                ],
                "target": {
                  "scopeName": "@azure",
                  "packageName": "cosmos",
                  "exportName": "QueryIterator",
                  "memberName": ""
                }
              },
              {
                "kind": "text",
                "text": " Allows you to return all databases in an array or iterate over them one at a time."
              }
            ]
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Reads all databases."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DataType": {
      "kind": "enum",
      "values": {
        "LineString": {
          "kind": "enum value",
          "value": "\"LineString\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents a line string data type."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Number": {
          "kind": "enum value",
          "value": "\"Number\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents a numeric data type."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Point": {
          "kind": "enum value",
          "value": "\"Point\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents a point data type."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Polygon": {
          "kind": "enum value",
          "value": "\"Polygon\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents a polygon data type."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "String": {
          "kind": "enum value",
          "value": "\"String\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents a string data type."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Defines a target data type of an index path specification in the Azure Cosmos DB service."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ErrorResponse": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[key: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "activityId": {
          "kind": "property",
          "signature": "activityId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "body": {
          "kind": "property",
          "signature": "body?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "code": {
          "kind": "property",
          "signature": "code?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headers": {
          "kind": "property",
          "signature": "headers?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "retryAfterInMilliseconds": {
          "kind": "property",
          "signature": "retryAfterInMilliseconds?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "substatus": {
          "kind": "property",
          "signature": "substatus?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "FeedOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The feed options and query methods."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "a_im": {
          "kind": "property",
          "signature": "a_im?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates a change feed request. Must be set to \"Incremental feed\", or omitted otherwise."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "accessCondition": {
          "kind": "property",
          "signature": "accessCondition?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** Conditional HTTP method header type (IfMatch or IfNoneMatch). */\n        type: string;\n        /** Conditional HTTP method header value (the _etag field from the last version you read). */\n        condition: string;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Conditions Associated with the request."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "continuation": {
          "kind": "property",
          "signature": "continuation?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Opaque token for continuing the enumeration."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableRUPerMinuteUsage": {
          "kind": "property",
          "signature": "disableRUPerMinuteUsage?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DisableRUPerMinuteUsage is used to enable/disable Request Units(RUs)/minute capacity to serve the request if regular provisioned RUs/second is exhausted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableCrossPartitionQuery": {
          "kind": "property",
          "signature": "enableCrossPartitionQuery?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A value indicating whether users are enabled to send more than one request to execute the query in the Azure Cosmos DB database service."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "More than one request is necessary if the query is not scoped to single partition key value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableScanInQuery": {
          "kind": "property",
          "signature": "enableScanInQuery?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allow scan on the queries which couldn't be served as indexing was opted out on the requested paths."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialHeaders": {
          "kind": "property",
          "signature": "initialHeaders?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Advanced use case) Initial headers to start with when sending requests to Cosmos"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxDegreeOfParallelism": {
          "kind": "property",
          "signature": "maxDegreeOfParallelism?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The maximum number of concurrent operations that run client side during parallel query execution in the Azure Cosmos DB database service. Negative values make the system automatically decides the number of concurrent operations to run."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxItemCount": {
          "kind": "property",
          "signature": "maxItemCount?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Max number of items to be returned in the enumeration operation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "partitionKey": {
          "kind": "property",
          "signature": "partitionKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies a partition key definition for a particular path in the Azure Cosmos DB database service."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "populateQueryMetrics": {
          "kind": "property",
          "signature": "populateQueryMetrics?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enable returning query metrics in response headers"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sessionToken": {
          "kind": "property",
          "signature": "sessionToken?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Token for use with Session consistency."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHeaders": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[key: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Index": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dataType": {
          "kind": "property",
          "signature": "dataType: keyof typeof DataType;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof DataType",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "kind": {
          "kind": "property",
          "signature": "kind: keyof typeof IndexKind;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof IndexKind",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "precision": {
          "kind": "property",
          "signature": "precision?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IndexedPath": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "indexes": {
          "kind": "property",
          "signature": "indexes?: Index[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Index[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "path": {
          "kind": "property",
          "signature": "path: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IndexingMode": {
      "kind": "enum",
      "values": {
        "consistent": {
          "kind": "enum value",
          "value": "\"consistent\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index is updated synchronously with a create or update operation."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "With consistent indexing, query behavior is the same as the default consistency level for the container. The index is always kept up to date with the data."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "lazy": {
          "kind": "enum value",
          "value": "\"lazy\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index is updated asynchronously with respect to a create or update operation."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "With lazy indexing, queries are eventually consistent. The index is updated when the container is idle."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "\"none\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "No Index is provided."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Specifies the supported indexing modes.  Consistent  Lazy"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "IndexingPolicy": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "automatic": {
          "kind": "property",
          "signature": "automatic?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "excludedPaths": {
          "kind": "property",
          "signature": "excludedPaths?: IndexedPath[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IndexedPath[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "IncludedPath"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "IncludedPath",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " represents the paths to be excluded for indexing."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "includedPaths": {
          "kind": "property",
          "signature": "includedPaths?: IndexedPath[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IndexedPath[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "IncludedPath"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "IncludedPath",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " represents the paths to be included for indexing."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexingMode": {
          "kind": "property",
          "signature": "indexingMode?: keyof typeof IndexingMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof IndexingMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The indexing mode (consistent or lazy) "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "IndexingMode"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "IndexingMode",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IndexKind": {
      "kind": "enum",
      "values": {
        "Hash": {
          "kind": "enum value",
          "value": "\"Hash\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This is supplied for a path which has no sorting requirement. This kind of an index has better precision than corresponding range index."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Range": {
          "kind": "enum value",
          "value": "\"Range\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This is supplied for a path which requires sorting."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Spatial": {
          "kind": "enum value",
          "value": "\"Spatial\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This is supplied for a path which requires geospatial indexing."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Specifies the supported Index types."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Item": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to perform operations on a specific item."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Items"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Items",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for operations on all items; see "
        },
        {
          "kind": "code",
          "text": "container.items",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, id: string, primaryKey: string, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "primaryKey": {
              "name": "primaryKey",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Item"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Item",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<ItemResponse<ItemDefinition>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ItemResponse<ItemDefinition>>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryKey": {
          "kind": "property",
          "signature": "readonly primaryKey: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<ItemResponse<ItemDefinition>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ItemResponse<ItemDefinition>>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the item's definition."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "There is no set schema for JSON items. They may contain any number of custom properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: ItemDefinition, options?: RequestOptions): Promise<ItemResponse<ItemDefinition>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ItemResponse<ItemDefinition>>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ItemDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the item's definition."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "There is no set schema for JSON items. They may contain any number of custom properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ItemDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Items in Cosmos DB are simply JSON objects. Most of the Item operations allow for your to provide your own type that extends the very simple ItemDefintion."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "You cannot use any reserved keys. You can see the reserved key list in "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "ItemBody"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "ItemBody",
            "memberName": ""
          }
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[key: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ItemResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [
        "T extends ItemDefinition"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "item": {
          "kind": "property",
          "signature": "item: Item;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Item",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Item"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Item",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " the response corresponds to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Items": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for creating new items, and reading/querying all items"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Item"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Item",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " for reading, replacing, or deleting an existing container; use "
        },
        {
          "kind": "code",
          "text": ".item(id)",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create an instance of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Items"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Items",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " linked to the parent "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Container"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Container",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "create": {
          "kind": "method",
          "signature": "create(body: any, options?: RequestOptions): Promise<ItemResponse<ItemDefinition>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ItemResponse<ItemDefinition>>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a item."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "There is no set schema for JSON items. They may contain any number of custom properties.."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string | SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Queries all items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<ItemDefinition>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<ItemDefinition>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all items."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "There is no set schema for JSON items. They may contain any number of custom properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: any, options?: RequestOptions): Promise<ItemResponse<ItemDefinition>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<ItemResponse<ItemDefinition>>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert an item."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "There is no set schema for JSON items. They may contain any number of custom properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Location": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to specify the locations that are available, read is index 1 and write is index 0."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "databaseAccountEndpoint": {
          "kind": "property",
          "signature": "databaseAccountEndpoint: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "MediaOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Options associated with upload media."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contentType": {
          "kind": "property",
          "signature": "contentType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "HTTP ContentType header value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialHeaders": {
          "kind": "property",
          "signature": "initialHeaders?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Advanced use case) Initial headers to start with when sending requests to Cosmos"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slug": {
          "kind": "property",
          "signature": "slug?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "HTTP Slug header value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "MediaReadMode": {
      "kind": "enum",
      "values": {
        "Buffered": {
          "kind": "enum value",
          "value": "\"Buffered\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Content is buffered at the client and not directly streamed from the content store. "
            },
            {
              "kind": "html-tag",
              "token": "<p>"
            },
            {
              "kind": "text",
              "text": "Use Buffered to reduce the time taken to read and write media files."
            },
            {
              "kind": "html-tag",
              "token": "</p>"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Streamed": {
          "kind": "enum value",
          "value": "\"Streamed\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Content is directly streamed from the content store without any buffering at the client. "
            },
            {
              "kind": "html-tag",
              "token": "<p>"
            },
            {
              "kind": "text",
              "text": "Use Streamed to reduce the client memory overhead of reading and writing media files. "
            },
            {
              "kind": "html-tag",
              "token": "</p>"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum for media read mode values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Offer": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to read or replace an existing "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Offer"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Offer",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Offers"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Offers",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to query or read all offers."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(client: CosmosClient, id: string, clientContext: ClientContext);",
          "parameters": {
            "client": {
              "name": "client",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "CosmosClient"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Offer"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Offer",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "client": {
          "kind": "property",
          "signature": "readonly client: CosmosClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "CosmosClient",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<OfferResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<OfferResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OfferDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "OfferDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Offer"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Offer",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: OfferDefinition, options?: RequestOptions): Promise<OfferResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<OfferResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "OfferDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Offer"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Offer",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OfferDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "OfferDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OfferDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "content": {
          "kind": "property",
          "signature": "content?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        offerThroughput: number;\n        offerIsRUPerMinuteThroughputEnabled: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerResourceId": {
          "kind": "property",
          "signature": "offerResourceId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerType": {
          "kind": "property",
          "signature": "offerType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerVersion": {
          "kind": "property",
          "signature": "offerVersion?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resource": {
          "kind": "property",
          "signature": "resource?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "OfferResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "offer": {
          "kind": "property",
          "signature": "offer: Offer;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Offer",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Offer"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Offer",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OfferDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "OfferDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Offers": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to query or read all Offers."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Offer"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Offer",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to read or replace an existing "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Offer"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Offer",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " by id."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(client: CosmosClient, clientContext: ClientContext);",
          "parameters": {
            "client": {
              "name": "client",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "CosmosClient"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Offers"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Offers",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "client": {
          "kind": "property",
          "signature": "readonly client: CosmosClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "CosmosClient",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all offers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<OfferDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all offers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PartitionKeyDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "kind": {
          "kind": "property",
          "signature": "kind: keyof typeof PartitionKind;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof typeof PartitionKind",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "paths": {
          "kind": "property",
          "signature": "paths: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "PartitionKind": {
      "kind": "enum",
      "values": {
        "Hash": {
          "kind": "enum value",
          "value": "\"Hash\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Permission": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to read, replace, or delete a given "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Permission"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Permission",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Permissions"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Permissions",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to create, upsert, query, or read all Permissions."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(user: User, id: string, clientContext: ClientContext);",
          "parameters": {
            "user": {
              "name": "user",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "User"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permission"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permission",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<PermissionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<PermissionResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permission"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permission",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<PermissionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<PermissionResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PermissionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "PermissionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " of the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permission"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permission",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: PermissionDefinition, options?: RequestOptions): Promise<PermissionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<PermissionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "PermissionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permission"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permission",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PermissionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "PermissionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "user": {
          "kind": "property",
          "signature": "readonly user: User;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "User",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "PermissionDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the permission"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "permissionMode": {
          "kind": "property",
          "signature": "permissionMode: PermissionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PermissionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The mode of the permission, must be a value of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PermissionMode"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "PermissionMode",
                "memberName": ""
              }
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resource": {
          "kind": "property",
          "signature": "resource: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The link of the resource that the permission will be applied to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resourcePartitionKey": {
          "kind": "property",
          "signature": "resourcePartitionKey?: string | any[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | any[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "PermissionMode": {
      "kind": "enum",
      "values": {
        "All": {
          "kind": "enum value",
          "value": "\"all\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Permission applicable for all operations."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "None": {
          "kind": "enum value",
          "value": "\"none\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Permission not valid."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Read": {
          "kind": "enum value",
          "value": "\"read\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Permission applicable for read operations only."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum for permission mode values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "PermissionResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "permission": {
          "kind": "property",
          "signature": "permission: Permission;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Permission",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permission"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permission",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PermissionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "PermissionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Permissions": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Use to create, replace, query, and read all Permissions."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Permission"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Permission",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to read, replace, or delete a specific permission by id."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(user: User, clientContext: ClientContext);",
          "parameters": {
            "user": {
              "name": "user",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "User"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Permissions"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Permissions",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "create": {
          "kind": "method",
          "signature": "create(body: PermissionDefinition, options?: RequestOptions): Promise<PermissionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<PermissionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "PermissionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a permission."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A permission represents a per-User Permission to access a specific resource e.g. Item or Container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<PermissionDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: PermissionDefinition, options?: RequestOptions): Promise<PermissionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<PermissionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "PermissionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert a permission."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A permission represents a per-User Permission to access a specific resource e.g. Item or Cotnainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "user": {
          "kind": "property",
          "signature": "readonly user: User;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "User",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "QueryCompatibilityMode": {
      "kind": "enum",
      "values": {
        "Default": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Query": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SqlQuery": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "QueryIterator": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a QueryIterator Object, an implmenetation of feed or query response that enables traversal and iterating over the response in the Azure Cosmos DB database service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(clientContext: ClientContext, query: SqlQuerySpec | string, options: FeedOptions, // TODO: any options\n    fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[], resourceLink?: string | string[]);",
          "parameters": {
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            },
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec | string"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "FeedOptions"
            },
            "fetchFunctions": {
              "name": "fetchFunctions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "FetchFunctionCallback | FetchFunctionCallback[]"
            },
            "resourceLink": {
              "name": "resourceLink",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string | string[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "QueryIterator"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "QueryIterator",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "current": {
          "kind": "method",
          "signature": "current(): Promise<Response<T>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<Response<T>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Retrieve the current element on the QueryIterator."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "executeNext": {
          "kind": "method",
          "signature": "executeNext(): Promise<Response<T>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<Response<T>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Retrieve the next batch of the feed and pass them as an array to a function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "forEach": {
          "kind": "method",
          "signature": "forEach(callback: (result: T, headers?: IHeaders, index?: number) => boolean | void): Promise<void>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<void>",
            "description": [
              {
                "kind": "text",
                "text": "Promise"
              },
              {
                "kind": "html-tag",
                "token": "<void>"
              },
              {
                "kind": "text",
                "text": " - you should await or .catch the Promise in case there are any errors"
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "(result: T, headers?: IHeaders, index?: number) => boolean | void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calls a specified callback for each item returned from the query. Runs serially; each callback blocks the next."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getAsyncIterator": {
          "kind": "method",
          "signature": "getAsyncIterator(): AsyncIterable<Response<T>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "AsyncIterable<Response<T>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets an async iterator that will yield results until completion."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "NOTE: AsyncIterators are a very new feature and you might need to use polyfils/etc. in order to use them in your code."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "If you're using TypeScript, you can use the following polyfill as long as you target ES6 or higher and are running on Node 6 or higher."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": " QueryIterator.forEach for very similar functionality."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasMoreResults": {
          "kind": "method",
          "signature": "hasMoreResults(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "{Boolean} true if there is other elements to process in the QueryIterator."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Instead check if nextItem() or current() returns undefined."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Determine if there are still remaining resources to processs based on the value of the continuation token or the\\ elements remaining on the current batch in the QueryIterator."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "nextItem": {
          "kind": "method",
          "signature": "nextItem(): Promise<Response<T>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<Response<T>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Execute a provided function on the next element in the QueryIterator."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Reset the QueryIterator to the beginning and clear all the resources inside it"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toArray": {
          "kind": "method",
          "signature": "toArray(): Promise<Response<T[]>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<Response<T[]>>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Retrieve all the elements of the feed and pass them as an array to a function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "QueryMetrics": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(retrievedDocumentCount: number, retrievedDocumentSize: number, outputDocumentCount: number, outputDocumentSize: number, indexHitDocumentCount: number, totalQueryExecutionTime: TimeSpan, queryPreparationTimes: QueryPreparationTimes, indexLookupTime: TimeSpan, documentLoadTime: TimeSpan, vmExecutionTime: TimeSpan, runtimeExecutionTimes: RuntimeExecutionTimes, documentWriteTime: TimeSpan, clientSideMetrics: ClientSideMetrics);",
          "parameters": {
            "retrievedDocumentCount": {
              "name": "retrievedDocumentCount",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "retrievedDocumentSize": {
              "name": "retrievedDocumentSize",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "outputDocumentCount": {
              "name": "outputDocumentCount",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "outputDocumentSize": {
              "name": "outputDocumentSize",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "indexHitDocumentCount": {
              "name": "indexHitDocumentCount",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "totalQueryExecutionTime": {
              "name": "totalQueryExecutionTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "queryPreparationTimes": {
              "name": "queryPreparationTimes",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "QueryPreparationTimes"
            },
            "indexLookupTime": {
              "name": "indexLookupTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "documentLoadTime": {
              "name": "documentLoadTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "vmExecutionTime": {
              "name": "vmExecutionTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "runtimeExecutionTimes": {
              "name": "runtimeExecutionTimes",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "RuntimeExecutionTimes"
            },
            "documentWriteTime": {
              "name": "documentWriteTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "clientSideMetrics": {
              "name": "clientSideMetrics",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientSideMetrics"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "QueryMetrics"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "QueryMetrics",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(queryMetricsArray: QueryMetrics[]): QueryMetrics;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryMetrics",
            "description": []
          },
          "parameters": {
            "queryMetricsArray": {
              "name": "queryMetricsArray",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "QueryMetrics[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "returns a new QueryMetrics instance that is the addition of this and the arguments."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clientSideMetrics": {
          "kind": "property",
          "signature": "readonly clientSideMetrics: ClientSideMetrics;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ClientSideMetrics",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "createFromArray": {
          "kind": "method",
          "signature": "static createFromArray(queryMetricsArray: QueryMetrics[]): QueryMetrics;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "QueryMetrics",
            "description": []
          },
          "parameters": {
            "queryMetricsArray": {
              "name": "queryMetricsArray",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "QueryMetrics[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.  QueryMetrics "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromDelimitedString": {
          "kind": "method",
          "signature": "static createFromDelimitedString(delimitedString: string, clientSideMetrics?: ClientSideMetrics): QueryMetrics;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "QueryMetrics",
            "description": []
          },
          "parameters": {
            "delimitedString": {
              "name": "delimitedString",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientSideMetrics": {
              "name": "clientSideMetrics",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ClientSideMetrics"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.  QueryMetrics "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "documentLoadTime": {
          "kind": "property",
          "signature": "readonly documentLoadTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "documentWriteTime": {
          "kind": "property",
          "signature": "readonly documentWriteTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexHitDocumentCount": {
          "kind": "property",
          "signature": "readonly indexHitDocumentCount: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexHitRatio": {
          "kind": "property",
          "signature": "readonly indexHitRatio: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the IndexHitRatio  QueryMetrics  "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexLookupTime": {
          "kind": "property",
          "signature": "readonly indexLookupTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "outputDocumentCount": {
          "kind": "property",
          "signature": "readonly outputDocumentCount: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "outputDocumentSize": {
          "kind": "property",
          "signature": "readonly outputDocumentSize: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "queryPreparationTimes": {
          "kind": "property",
          "signature": "readonly queryPreparationTimes: QueryPreparationTimes;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "QueryPreparationTimes",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "retrievedDocumentCount": {
          "kind": "property",
          "signature": "readonly retrievedDocumentCount: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "retrievedDocumentSize": {
          "kind": "property",
          "signature": "readonly retrievedDocumentSize: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "runtimeExecutionTimes": {
          "kind": "property",
          "signature": "readonly runtimeExecutionTimes: RuntimeExecutionTimes;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "RuntimeExecutionTimes",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toDelimitedString": {
          "kind": "method",
          "signature": "toDelimitedString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Output the QueryMetrics as a delimited string.  QueryMetrics  "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalQueryExecutionTime": {
          "kind": "property",
          "signature": "readonly totalQueryExecutionTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "vmExecutionTime": {
          "kind": "property",
          "signature": "readonly vmExecutionTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "zero": {
          "kind": "property",
          "signature": "static readonly zero: QueryMetrics;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "QueryMetrics",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "QueryMetricsUtils": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isNumeric": {
          "kind": "method",
          "signature": "static isNumeric(input: any): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "input": {
              "name": "input",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "parseDelimitedString": {
          "kind": "method",
          "signature": "static parseDelimitedString:",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "{\n        [key: string]: any;\n    }",
            "description": []
          },
          "parameters": {
            "delimitedString": {
              "name": "delimitedString",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "timeSpanFromMetrics": {
          "kind": "method",
          "signature": "static timeSpanFromMetrics(metrics: {\n        [key: string]: any;\n    }, key: string): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "metrics": {
              "name": "metrics",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "{\n        [key: string]: any;\n    }"
            },
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "QueryPreparationTimes": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(queryCompilationTime: TimeSpan, logicalPlanBuildTime: TimeSpan, physicalPlanBuildTime: TimeSpan, queryOptimizationTime: TimeSpan);",
          "parameters": {
            "queryCompilationTime": {
              "name": "queryCompilationTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "logicalPlanBuildTime": {
              "name": "logicalPlanBuildTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "physicalPlanBuildTime": {
              "name": "physicalPlanBuildTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "queryOptimizationTime": {
              "name": "queryOptimizationTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "QueryPreparationTimes"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "QueryPreparationTimes",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(...queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryPreparationTimes",
            "description": []
          },
          "parameters": {
            "queryPreparationTimesArray": {
              "name": "queryPreparationTimesArray",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "QueryPreparationTimes[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "returns a new QueryPreparationTimes instance that is the addition of this and the arguments."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromArray": {
          "kind": "method",
          "signature": "static createFromArray(queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "QueryPreparationTimes",
            "description": []
          },
          "parameters": {
            "queryPreparationTimesArray": {
              "name": "queryPreparationTimesArray",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "QueryPreparationTimes[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the QueryPreparationTimes class that is the aggregation of an array of QueryPreparationTimes.  QueryMetrics "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromDelimitedString": {
          "kind": "method",
          "signature": "static createFromDelimitedString(delimitedString: string): QueryPreparationTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "QueryPreparationTimes",
            "description": []
          },
          "parameters": {
            "delimitedString": {
              "name": "delimitedString",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.  QueryMetrics "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "logicalPlanBuildTime": {
          "kind": "property",
          "signature": "readonly logicalPlanBuildTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "physicalPlanBuildTime": {
          "kind": "property",
          "signature": "readonly physicalPlanBuildTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "queryCompilationTime": {
          "kind": "property",
          "signature": "readonly queryCompilationTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "queryOptimizationTime": {
          "kind": "property",
          "signature": "readonly queryOptimizationTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toDelimitedString": {
          "kind": "method",
          "signature": "toDelimitedString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Output the QueryPreparationTimes as a delimited string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "zero": {
          "kind": "property",
          "signature": "static readonly zero: QueryPreparationTimes;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "QueryPreparationTimes",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "RequestOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Options that can be specified for a requested issued to the Azure Cosmos DB servers.="
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "accessCondition": {
          "kind": "property",
          "signature": "accessCondition?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        /** Conditional HTTP method header type (IfMatch or IfNoneMatch). */\n        type: string;\n        /** Conditional HTTP method header value (the _etag field from the last version you read). */\n        condition: string;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Conditions Associated with the request."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "consistencyLevel": {
          "kind": "property",
          "signature": "consistencyLevel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Consistency level required by the client."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableAutomaticIdGeneration": {
          "kind": "property",
          "signature": "disableAutomaticIdGeneration?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disable automatic id generation (will cause creates to fail if id isn't on the definition)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableRUPerMinuteUsage": {
          "kind": "property",
          "signature": "disableRUPerMinuteUsage?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DisableRUPerMinuteUsage is used to enable/disable Request Units(RUs)/minute capacity to serve the request if regular provisioned RUs/second is exhausted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableScriptLogging": {
          "kind": "property",
          "signature": "enableScriptLogging?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables or disables logging in JavaScript stored procedures."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indexingDirective": {
          "kind": "property",
          "signature": "indexingDirective?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies indexing directives (index, do not index .. etc)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialHeaders": {
          "kind": "property",
          "signature": "initialHeaders?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Advanced use case) Initial headers to start with when sending requests to Cosmos"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerEnableRUPerMinuteThroughput": {
          "kind": "property",
          "signature": "offerEnableRUPerMinuteThroughput?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Represents Request Units(RU)/Minute throughput is enabled/disabled for a container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerThroughput": {
          "kind": "property",
          "signature": "offerThroughput?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The offer throughput provisioned for a container in measurement of Requests-per-Unit."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offerType": {
          "kind": "property",
          "signature": "offerType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Offer type when creating document containers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "This option is only valid when creating a document container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "partitionKey": {
          "kind": "property",
          "signature": "partitionKey?: PartitionKey | PartitionKey[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PartitionKey | PartitionKey[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies a partition key definition for a particular path in the Azure Cosmos DB database service."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "populateQuotaInfo": {
          "kind": "property",
          "signature": "populateQuotaInfo?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables/disables getting document container quota related stats for document container read requests."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "postTriggerInclude": {
          "kind": "property",
          "signature": "postTriggerInclude?: string | string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates what is the post trigger to be invoked after the operation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "preTriggerInclude": {
          "kind": "property",
          "signature": "preTriggerInclude?: string | string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates what is the pre trigger to be invoked before the operation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resourceTokenExpirySeconds": {
          "kind": "property",
          "signature": "resourceTokenExpirySeconds?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Expiry time (in seconds) for resource token associated with permission (applicable only for requests on permissions)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sessionToken": {
          "kind": "property",
          "signature": "sessionToken?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Token for use with Session consistency."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "skipGetPartitionKeyDefinition": {
          "kind": "property",
          "signature": "skipGetPartitionKeyDefinition?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Advanced use case) Skip getting info on the parititon key from the container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "urlConnection": {
          "kind": "property",
          "signature": "urlConnection?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Advanced use case) The url to connect to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Resource": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_etag": {
          "kind": "property",
          "signature": "_etag: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "System generated property. Represents the resource etag required for optimistic concurrency control."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_rid": {
          "kind": "property",
          "signature": "_rid: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "System generated property. The resource ID (_rid) is a unique identifier that is also hierarchical per the resource stack on the resource model. It is used internally for placement and navigation of the item resource."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_self": {
          "kind": "property",
          "signature": "_self: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "System generated property. The unique addressable URI for the resource."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_ts": {
          "kind": "property",
          "signature": "_ts: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "System generated property. Specifies the last updated timestamp of the resource. The value is a timestamp."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Required. User settable property. Unique name that identifies the item, that is, no two items share the same ID within a database. The id must not exceed 255 characters."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Response": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "headers": {
          "kind": "property",
          "signature": "headers?: IHeaders;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IHeaders",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "result": {
          "kind": "property",
          "signature": "result?: T;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "RetryOptions": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the Retry policy assocated with throttled requests in the Azure Cosmos DB database service."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(\n    MaxRetryAttemptCount?: number, \n    FixedRetryIntervalInMilliseconds?: number, \n    MaxWaitTimeInSeconds?: number);",
          "parameters": {
            "MaxRetryAttemptCount": {
              "name": "MaxRetryAttemptCount",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "FixedRetryIntervalInMilliseconds": {
              "name": "FixedRetryIntervalInMilliseconds",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "MaxWaitTimeInSeconds": {
              "name": "MaxWaitTimeInSeconds",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "RetryOptions"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "RetryOptions",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "FixedRetryIntervalInMilliseconds": {
          "kind": "property",
          "signature": "readonly FixedRetryIntervalInMilliseconds: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Fixed retry interval in milliseconds to wait between each retry ignoring the retryAfter returned as part of the response."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MaxRetryAttemptCount": {
          "kind": "property",
          "signature": "readonly MaxRetryAttemptCount: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Max number of retries to be performed for a request. Default value 9."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "MaxWaitTimeInSeconds": {
          "kind": "property",
          "signature": "readonly MaxWaitTimeInSeconds: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Max wait time in seconds to wait for a request while the retries are happening. Default value 30 seconds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "RuntimeExecutionTimes": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(queryEngineExecutionTime: TimeSpan, systemFunctionExecutionTime: TimeSpan, userDefinedFunctionExecutionTime: TimeSpan);",
          "parameters": {
            "queryEngineExecutionTime": {
              "name": "queryEngineExecutionTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "systemFunctionExecutionTime": {
              "name": "systemFunctionExecutionTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "userDefinedFunctionExecutionTime": {
              "name": "userDefinedFunctionExecutionTime",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "RuntimeExecutionTimes"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "RuntimeExecutionTimes",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "add": {
          "kind": "method",
          "signature": "add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "RuntimeExecutionTimes",
            "description": []
          },
          "parameters": {
            "runtimeExecutionTimesArray": {
              "name": "runtimeExecutionTimesArray",
              "description": [],
              "isOptional": false,
              "isSpread": true,
              "type": "RuntimeExecutionTimes[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromArray": {
          "kind": "method",
          "signature": "static createFromArray(runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "RuntimeExecutionTimes",
            "description": []
          },
          "parameters": {
            "runtimeExecutionTimesArray": {
              "name": "runtimeExecutionTimesArray",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "RuntimeExecutionTimes[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the RuntimeExecutionTimes class that is the aggregation of an array of RuntimeExecutionTimes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createFromDelimitedString": {
          "kind": "method",
          "signature": "static createFromDelimitedString(delimitedString: string): RuntimeExecutionTimes;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "RuntimeExecutionTimes",
            "description": []
          },
          "parameters": {
            "delimitedString": {
              "name": "delimitedString",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "queryEngineExecutionTime": {
          "kind": "property",
          "signature": "readonly queryEngineExecutionTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "systemFunctionExecutionTime": {
          "kind": "property",
          "signature": "readonly systemFunctionExecutionTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toDelimitedString": {
          "kind": "method",
          "signature": "toDelimitedString(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Output the RuntimeExecutionTimes as a delimited string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "userDefinedFunctionExecutionTime": {
          "kind": "property",
          "signature": "readonly userDefinedFunctionExecutionTime: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "zero": {
          "kind": "property",
          "signature": "static readonly zero: RuntimeExecutionTimes;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "RuntimeExecutionTimes",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "SqlParameter": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a parameter in a Parameterized SQL query, specified in "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "SqlQuerySpec"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "SqlQuerySpec",
            "memberName": ""
          }
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name of the parameter. (i.e. \"@lastName\")"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string | number | boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number | boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Value of the parameter (this is safe to come from users, assuming they are authorized)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "SqlQuerySpec": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a SQL query in the Azure Cosmos DB service."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Queries with inputs should be parameterized to protect against SQL injection."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "parameters": {
          "kind": "property",
          "signature": "parameters?: SqlParameter[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SqlParameter[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The parameters you provide in the query"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "query": {
          "kind": "property",
          "signature": "query: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text of the SQL query"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "StoredProcedure": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "For operations to create, upsert, read all, or query Stored Procedures,"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, id: string, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a new isntance of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " linked to the parent "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Container"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Container",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<StoredProcedureResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<StoredProcedureResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "execute": {
          "kind": "method",
          "signature": "execute(params?: any[], options?: RequestOptions): Promise<CosmosResponse<any, StoredProcedure>>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<CosmosResponse<any, StoredProcedure>>",
            "description": []
          },
          "parameters": {
            "params": {
              "name": "params",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "any[]"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Execute the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<StoredProcedureResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<StoredProcedureResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedureDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedureDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: StoredProcedureDefinition, options?: RequestOptions): Promise<StoredProcedureResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<StoredProcedureResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "StoredProcedureDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedureDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedureDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "StoredProcedureDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "body": {
          "kind": "property",
          "signature": "body?: string | ((...inputs: any[]) => void);",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | ((...inputs: any[]) => void)",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The body of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": ". This is a JavaScript function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "StoredProcedureResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "sproc": {
          "kind": "property",
          "signature": "sproc: StoredProcedure;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "StoredProcedure",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Alias for storedProcedure."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " which the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedureDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedureDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponds to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "storedProcedure": {
          "kind": "property",
          "signature": "storedProcedure: StoredProcedure;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "StoredProcedure",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedure"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedure",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " which the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedureDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedureDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponds to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "StoredProcedures": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations for creating, upserting, or reading/querying all Stored Procedures."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see "
        },
        {
          "kind": "code",
          "text": "container.storedProcedure()",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "StoredProcedures"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "StoredProcedures",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "create": {
          "kind": "method",
          "signature": "create(body: StoredProcedureDefinition, options?: RequestOptions): Promise<StoredProcedureResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<StoredProcedureResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "StoredProcedureDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a StoredProcedure."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB allows stored procedures to be executed in the storage tier, directly against an item container. The script gets executed under ACID transactions on the primary storage partition of the specified container. For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all Stored Procedures."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<StoredProcedureDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<StoredProcedureDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all stored procedures."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: StoredProcedureDefinition, options?: RequestOptions): Promise<StoredProcedureResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<StoredProcedureResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "StoredProcedureDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert a StoredProcedure."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB allows stored procedures to be executed in the storage tier, directly against a document container. The script gets executed under ACID transactions on the primary storage partition of the specified container. For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "TimeSpan": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents a time interval."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " TimeSpan"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number);",
          "parameters": {
            "days": {
              "name": "days",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "hours": {
              "name": "hours",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "minutes": {
              "name": "minutes",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "seconds": {
              "name": "seconds",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "milliseconds": {
              "name": "milliseconds",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TimeSpan"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TimeSpan",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_ticks": {
          "kind": "property",
          "signature": "protected _ticks: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "add": {
          "kind": "method",
          "signature": "add(ts: TimeSpan): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "ts": {
              "name": "ts",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "additionDoesOverflow": {
          "kind": "method",
          "signature": "static additionDoesOverflow(a: number, b: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "a": {
              "name": "a",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "compare": {
          "kind": "method",
          "signature": "static compare(t1: TimeSpan, t2: TimeSpan): 0 | 1 | -1;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "0 | 1 | -1",
            "description": []
          },
          "parameters": {
            "t1": {
              "name": "t1",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            },
            "t2": {
              "name": "t2",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "compareTo": {
          "kind": "method",
          "signature": "compareTo(value: TimeSpan): 0 | 1 | -1;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "0 | 1 | -1",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "days": {
          "kind": "method",
          "signature": "days(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "duration": {
          "kind": "method",
          "signature": "duration(): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.  TimeSpan "
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(value: TimeSpan): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a value indicating whether this instance is equal to a specified object.  TimeSpan"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromDays": {
          "kind": "method",
          "signature": "static fromDays(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromHours": {
          "kind": "method",
          "signature": "static fromHours(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromMilliseconds": {
          "kind": "method",
          "signature": "static fromMilliseconds(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromMinutes": {
          "kind": "method",
          "signature": "static fromMinutes(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromSeconds": {
          "kind": "method",
          "signature": "static fromSeconds(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "fromTicks": {
          "kind": "method",
          "signature": "static fromTicks(value: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hours": {
          "kind": "method",
          "signature": "hours(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "interval": {
          "kind": "method",
          "signature": "static interval(value: number, scale: number): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "scale": {
              "name": "scale",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isTimeSpan": {
          "kind": "method",
          "signature": "static isTimeSpan(timespan: TimeSpan): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {
            "timespan": {
              "name": "timespan",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "maxValue": {
          "kind": "property",
          "signature": "static readonly maxValue: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "milliseconds": {
          "kind": "method",
          "signature": "milliseconds(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "minValue": {
          "kind": "property",
          "signature": "static readonly minValue: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "negate": {
          "kind": "method",
          "signature": "negate(): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new TimeSpan object whose value is the negated value of this instance.  TimeSpan"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "seconds": {
          "kind": "method",
          "signature": "seconds(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtract": {
          "kind": "method",
          "signature": "subtract(ts: TimeSpan): TimeSpan;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TimeSpan",
            "description": []
          },
          "parameters": {
            "ts": {
              "name": "ts",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TimeSpan"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "subtractionDoesUnderflow": {
          "kind": "method",
          "signature": "static subtractionDoesUnderflow(a: number, b: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "a": {
              "name": "a",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "b": {
              "name": "b",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ticks": {
          "kind": "method",
          "signature": "ticks(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalDays": {
          "kind": "method",
          "signature": "totalDays(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalHours": {
          "kind": "method",
          "signature": "totalHours(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalMilliseconds": {
          "kind": "method",
          "signature": "totalMilliseconds(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalMinutes": {
          "kind": "method",
          "signature": "totalMinutes(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "totalSeconds": {
          "kind": "method",
          "signature": "totalSeconds(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "zero": {
          "kind": "property",
          "signature": "static readonly zero: TimeSpan;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": true,
          "type": "TimeSpan",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Trigger": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations to read, replace, or delete a "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Trigger"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Trigger",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Use "
        },
        {
          "kind": "code",
          "text": "container.triggers",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " to create, upsert, query, or read all."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, id: string, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<TriggerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<TriggerResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<TriggerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<TriggerResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TriggerDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TriggerDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: TriggerDefinition, options?: RequestOptions): Promise<TriggerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<TriggerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TriggerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TriggerDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TriggerDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "TriggerDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "body": {
          "kind": "property",
          "signature": "body: (() => void) | string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(() => void) | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The body of the trigger, it can also be passed as a stringifed function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the trigger."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "triggerOperation": {
          "kind": "property",
          "signature": "triggerOperation: TriggerOperation;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TriggerOperation",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The trigger operation, should be one of the values of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TriggerOperation"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TriggerOperation",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "triggerType": {
          "kind": "property",
          "signature": "triggerType: TriggerType;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TriggerType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The type of the trigger, should be one of the values of "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TriggerType"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TriggerType",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "TriggerOperation": {
      "kind": "enum",
      "values": {
        "All": {
          "kind": "enum value",
          "value": "\"all\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "All operations."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Create": {
          "kind": "enum value",
          "value": "\"create\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create operations only."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Delete": {
          "kind": "enum value",
          "value": "\"delete\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete operations only."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Replace": {
          "kind": "enum value",
          "value": "\"replace\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace operations only."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Update": {
          "kind": "enum value",
          "value": "\"update\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Update operations only."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum for trigger operation values. specifies the operations on which a trigger should be executed."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "TriggerResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "trigger": {
          "kind": "property",
          "signature": "trigger: Trigger;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Trigger",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Trigger"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Trigger",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TriggerDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "TriggerDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Triggers": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Operations to create, upsert, query, and read all triggers."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Use "
        },
        {
          "kind": "code",
          "text": "container.triggers",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " to read, replace, or delete a "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Trigger"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Trigger",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": "."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Triggers"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Triggers",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "create": {
          "kind": "method",
          "signature": "create(body: TriggerDefinition, options?: RequestOptions): Promise<TriggerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<TriggerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TriggerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a trigger."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all Triggers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<TriggerDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<TriggerDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all Triggers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: TriggerDefinition, options?: RequestOptions): Promise<TriggerResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<TriggerResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "TriggerDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert a trigger."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed on creates, updates and deletes."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "TriggerType": {
      "kind": "enum",
      "values": {
        "Post": {
          "kind": "enum value",
          "value": "\"post\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Trigger should be executed after the associated operation(s)."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Pre": {
          "kind": "enum value",
          "value": "\"pre\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Trigger should be executed before the associated operation(s)."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum for trigger type values. Specifies the type of the trigger."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "UriFactory": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "createAttachmentUri": {
          "kind": "method",
          "signature": "static createAttachmentUri(databaseId: string, collectionId: string, documentId: string, attachmentId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\ with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId  Would be used when creating a Conflict in Azure Cosmos DB database service."
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "documentId": {
              "name": "documentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "attachmentId": {
              "name": "attachmentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": " Given a database, collection and conflict id, this creates a conflict link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createConflictUri": {
          "kind": "method",
          "signature": "static createConflictUri(databaseId: string, collectionId: string, conflictId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A conflict link in the format of dbs/{0}/colls/{1}/conflicts/{2} \\ with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the conflictId  Would be used when creating a Conflict in Azure Cosmos DB database service."
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "conflictId": {
              "name": "conflictId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": " Given a database, collection and conflict id, this creates a conflict link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createDatabaseUri": {
          "kind": "method",
          "signature": "static createDatabaseUri(databaseId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A database link in the format of dbs/{0} \\ with {0} being a Uri escaped version of the databaseId  Would be used when creating or deleting a DocumentCollection \\ or a User in Azure Cosmos DB database service"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database id, this creates a database link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createDocumentCollectionUri": {
          "kind": "method",
          "signature": "static createDocumentCollectionUri(databaseId: string, collectionId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} A collection link in the format of dbs/{0}/colls/{1} \\ with {0} being a Uri escaped version of the databaseId and {1} being collectionId  Would be used when updating or deleting a DocumentCollection, creating a \\ Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query \\ with CreateDocumentQuery in Azure Cosmos DB database service."
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database and collection id, this creates a collection link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createDocumentUri": {
          "kind": "method",
          "signature": "static createDocumentUri(databaseId: string, collectionId: string, documentId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A document link in the format of \\ dbs/{0}/colls/{1}/docs/{2} with {0} being a Uri escaped version of \\ the databaseId, {1} being collectionId and {2} being the documentId  Would be used when creating an Attachment, or when replacing \\ or deleting a Document in Azure Cosmos DB database service"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "documentId": {
              "name": "documentId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database and collection id, this creates a collection link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createPartitionKeyRangesUri": {
          "kind": "method",
          "signature": "static createPartitionKeyRangesUri(databaseId: string, collectionId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A partition key ranges link in the format of \\ dbs/{0}/colls/{1}/pkranges with {0} being a Uri escaped version of the databaseId and {1} being collectionId"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": " Given a database and collection, this creates a partition key ranges link in\\ the Azure Cosmos DB database service."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createPermissionUri": {
          "kind": "method",
          "signature": "static createPermissionUri(databaseId: string, userId: string, permissionId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} A permission link in the format of dbs/{0}/users/{1}/permissions/{2} \\ with {0} being a Uri escaped version of the databaseId, {1} being userId and {2} being permissionId  Would be used when replacing or deleting a Permission in Azure Cosmos DB database service."
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "userId": {
              "name": "userId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "permissionId": {
              "name": "permissionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database, collection and document id, this creates a document link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createStoredProcedureUri": {
          "kind": "method",
          "signature": "static createStoredProcedureUri(databaseId: string, collectionId: string, storedProcedureId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A stored procedure link in the format of \\ dbs/{0}/colls/{1}/sprocs/{2} with {0} being a Uri escaped version of the databaseId, \\ {1} being collectionId and {2} being the storedProcedureId  Would be used when replacing, executing, or deleting a StoredProcedure in \\ Azure Cosmos DB database service."
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "storedProcedureId": {
              "name": "storedProcedureId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database, collection and stored proc id, this creates a stored proc link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createTriggerUri": {
          "kind": "method",
          "signature": "static createTriggerUri(databaseId: string, collectionId: string, triggerId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A trigger link in the format of \\ dbs/{0}/colls/{1}/triggers/{2} with {0} being a Uri escaped version of the databaseId, \\ {1} being collectionId and {2} being the triggerId  Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "triggerId": {
              "name": "triggerId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": " Given a database, collection and trigger id, this creates a trigger link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createUserDefinedFunctionUri": {
          "kind": "method",
          "signature": "static createUserDefinedFunctionUri(databaseId: string, collectionId: string, udfId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} -A udf link in the format of dbs/{0}/colls/{1}/udfs/{2} \\ with {0} being a Uri escaped version of the databaseId, {1} being collectionId and {2} being the udfId  Would be used when replacing, executing, or deleting a UserDefinedFunction in \\ Azure Cosmos DB database service"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "collectionId": {
              "name": "collectionId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "udfId": {
              "name": "udfId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": " Given a database, collection and udf id, this creates a udf link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createUserUri": {
          "kind": "method",
          "signature": "static createUserUri(databaseId: string, userId: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "string",
            "description": [
              {
                "kind": "text",
                "text": "{string} A user link in the format of dbs/{0}/users/{1} \\ with {0} being a Uri escaped version of the databaseId and {1} being userId  Would be used when creating a Permission, or when replacing or deleting \\ a User in Azure Cosmos DB database service"
              }
            ]
          },
          "parameters": {
            "databaseId": {
              "name": "databaseId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "userId": {
              "name": "userId",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given a database and user id, this creates a user link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "User": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to read, replace, and delete Users."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Additionally, you can access the permissions for a given user via "
        },
        {
          "kind": "code",
          "text": "user.permission",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " and "
        },
        {
          "kind": "code",
          "text": "user.permissions",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "Users"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "Users",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to create, upsert, query, or read all."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(database: Database, id: string, clientContext: ClientContext);",
          "parameters": {
            "database": {
              "name": "database",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Database"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "database": {
          "kind": "property",
          "signature": "readonly database: Database;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Database",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<UserResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "permission": {
          "kind": "method",
          "signature": "permission(id: string): Permission;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Permission",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations to read, replace, or delete a specific Permission by id."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "See "
            },
            {
              "kind": "code",
              "text": "client.permissions",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for creating, upserting, querying, or reading all operations."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "permissions": {
          "kind": "property",
          "signature": "readonly permissions: Permissions;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Permissions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Operations for creating, upserting, querying, or reading all operations."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "See "
            },
            {
              "kind": "code",
              "text": "client.permission(id)",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to read, replace, or delete a specific Permission by id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<UserResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "'s definition with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UserDefinedFunction": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to read, replace, or delete a specified User Definied Function by id."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "UserDefinedFunction"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "UserDefinedFunction",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to create, upsert, query, read all User Defined Functions."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, id: string, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delete": {
          "kind": "method",
          "signature": "delete(options?: RequestOptions): Promise<UserDefinedFunctionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserDefinedFunctionResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delete the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefined"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefined",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "id": {
          "kind": "property",
          "signature": "readonly id: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "read": {
          "kind": "method",
          "signature": "read(options?: RequestOptions): Promise<UserDefinedFunctionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserDefinedFunctionResponse>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunctionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunctionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "replace": {
          "kind": "method",
          "signature": "replace(body: UserDefinedFunctionDefinition, options?: RequestOptions): Promise<UserDefinedFunctionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserDefinedFunctionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinedFunctionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Replace the given "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunctionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunctionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "url": {
          "kind": "property",
          "signature": "readonly url: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a reference URL to the resource. Used for linking in Permissions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UserDefinedFunctionDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "body": {
          "kind": "property",
          "signature": "body?: string | (() => void);",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | (() => void)",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The body of the user defined function, it can also be passed as a stringifed function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UserDefinedFunctionResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "udf": {
          "kind": "property",
          "signature": "udf: UserDefinedFunction;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "UserDefinedFunction",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Alias for `userDefinedFunction(id)."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunctionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunctionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "userDefinedFunction": {
          "kind": "property",
          "signature": "userDefinedFunction: UserDefinedFunction;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "UserDefinedFunction",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunction"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunction",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunctionDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunctionDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UserDefinedFunctions": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to create, upsert, query, or read all User Defined Functions."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "UserDefinedFunction"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "UserDefinedFunction",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to read, replace, or delete a given User Defined Function by id."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(container: Container, clientContext: ClientContext);",
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Container"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinedFunctions"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinedFunctions",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "container": {
          "kind": "property",
          "signature": "readonly container: Container;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Container",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "create": {
          "kind": "method",
          "signature": "create(body: UserDefinedFunctionDefinition, options?: RequestOptions): Promise<UserDefinedFunctionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserDefinedFunctionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinedFunctionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a UserDefinedFunction."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all User Defined Functions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<UserDefinedFunctionDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<UserDefinedFunctionDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all User Defined Functions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: UserDefinedFunctionDefinition, options?: RequestOptions): Promise<UserDefinedFunctionResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserDefinedFunctionResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinedFunctionDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert a UserDefinedFunction."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "For additional details, refer to the server-side JavaScript API documentation."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "UserDefinedFunctionType": {
      "kind": "enum",
      "values": {
        "Javascript": {
          "kind": "enum value",
          "value": "\"Javascript\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The User Defined Function is written in JavaScript. This is currently the only option."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum for udf type values. Specifies the types of user defined functions."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "UserDefinition": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of the user."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "UserResponse": {
      "kind": "interface",
      "extends": "CosmosResponse",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "user": {
          "kind": "property",
          "signature": "user: User;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "User",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "User"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "User",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " corresponding to the returned "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Users": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Used to create, upsert, query, and read all users."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "api-link",
          "elements": [
            {
              "kind": "text",
              "text": "User"
            }
          ],
          "target": {
            "scopeName": "@azure",
            "packageName": "cosmos",
            "exportName": "User",
            "memberName": ""
          }
        },
        {
          "kind": "text",
          "text": " to read, replace, or delete a specific User by id."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(database: Database, clientContext: ClientContext);",
          "parameters": {
            "database": {
              "name": "database",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Database"
            },
            "clientContext": {
              "name": "clientContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ClientContext"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Users"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "Users",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "create": {
          "kind": "method",
          "signature": "create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a database user with the specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "database": {
          "kind": "property",
          "signature": "readonly database: Database;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Database",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "query": {
          "kind": "method",
          "signature": "query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<any>",
            "description": []
          },
          "parameters": {
            "query": {
              "name": "query",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SqlQuerySpec"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Query all users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "readAll": {
          "kind": "method",
          "signature": "readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "QueryIterator<UserDefinition & Resource>",
            "description": []
          },
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "FeedOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Read all users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "upsert": {
          "kind": "method",
          "signature": "upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "Promise<UserResponse>",
            "description": []
          },
          "parameters": {
            "body": {
              "name": "body",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "UserDefinition"
            },
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "RequestOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Upsert a database user with a specified "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "UserDefinition"
                }
              ],
              "target": {
                "scopeName": "@azure",
                "packageName": "cosmos",
                "exportName": "UserDefinition",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    }
  }
}
